{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;qBAAkB,OAAO;;;;;;;;;;;;qBAQV,UAAC,MAAM,EAAsC;QAApC,eAAe,yDAAG,CAAC,WAAW,CAAC;;AACnD;kBAAa,iBAAiB;;iBAAjB,iBAAiB;;;kCAAjB,iBAAiB;;uCAAjB,iBAAiB;;iBAC1B,iBAAiB,GAAG,YAAM;AACtB,oBAAI,CAAC,MAAK,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;AAClC,0BAAM,IAAI,KAAK,CAAC,qDAAqD,CAAC,CAAC;iBAC1E;;AAED,+BAAe,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AACnC,0BAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,MAAK,WAAW,EAAE,KAAK,CAAC,CAAC;iBAC/D,CAAC,CAAC;aACN;;iBAED,oBAAoB,GAAG,YAAM;AACzB,+BAAe,CAAC,OAAO,CAAC,UAAC,SAAS,EAAK;AACnC,0BAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,MAAK,WAAW,EAAE,KAAK,CAAC,CAAC;iBAClE,CAAC,CAAC;aACN;;iBAED,WAAW,GAAG,UAAC,KAAK,EAAK;AACrB,oBAAI,MAAM,YAAA;oBACN,aAAa,YAAA;oBACb,QAAQ,YAAA;oBACR,SAAS,YAAA,CAAC;;AAEd,sBAAM,GAAG,MAAK,IAAI,CAAC,MAAM,CAAC;AAC1B,6BAAa,GAAG,mBAAS,WAAW,CAAC,MAAM,CAAC,CAAC;AAC7C,wBAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,aAAa,KAAK,KAAK,CAAC,MAAM,CAAC;AAClF,yBAAS,GAAG,CAAC,QAAQ,CAAC;;AAItB,oBAAI,SAAS,EAAE;AACX,0BAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;iBAChC;aACJ;;;qBAjCQ,iBAAiB;;mBAmCpB,kBAAG;AACL,uBAAO,iCAAC,MAAM,aAAC,GAAG,EAAC,QAAQ,IAAM,IAAI,CAAC,KAAK,EAAI,CAAC;aACnD;;;eArCQ,iBAAiB;OAAS,mBAAM,SAAS,EAsCrD;CACJ","file":"index.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react';\n\n/**\n * @param {ReactClass} Target The component that defines `onOutsideEvent` handler.\n * @param {String[]} supportedEvents A list of valid DOM event names. Default: ['mousedown'].\n * @return {ReactClass}\n */\nexport default (Target, supportedEvents = ['mousedown']) => {\n    return class ReactOutsideEvent extends React.Component {\n        componentDidMount = () => {\n            if (!this.refs.target.onOutsideEvent) {\n                throw new Error('Component does not defined \"onOutsideEvent\" method.');\n            }\n\n            supportedEvents.forEach((eventName) => {\n                window.addEventListener(eventName, this.handleEvent, false);\n            });\n        };\n\n        componentWillUnmount = () => {\n            supportedEvents.forEach((eventName) => {\n                window.removeEventListener(eventName, this.handleEvent, false);\n            });\n        };\n\n        handleEvent = (event) => {\n            let target,\n                targetElement,\n                isInside,\n                isOutside;\n\n            target = this.refs.target;\n            targetElement = ReactDOM.findDOMNode(target);\n            isInside = targetElement.contains(event.target) || targetElement === event.target;\n            isOutside = !isInside;\n\n\n\n            if (isOutside) {\n                target.onOutsideEvent(event);\n            }\n        };\n\n        render() {\n            return <Target ref='target' {... this.props} />;\n        }\n    }\n};\n"]}